
class OlderCourse(object):

	"""
	old class 
	
	"""

	def show(self):

		"""
		show the information of this class 
		
		"""
		print("show description")
		
		print("show teacher of course")

		print("show labs")

class Page(object):

	"""
	Use the course client

	"""

	def __init__(self, course):

		self.course = course
		
	def render(self):

		self.course.show()

class NewCourse(object):
	
	"""
	new class , for modulize the information of different class, renew the calss

	"""

	def show_desc(self):

		"""
		show information

		"""

	def show_teacher(self):

		"""
		show teacher's information

		"""
		print("show teacher of course")

	def show_labs(self):

		"""
		show labs

		"""
		print("show labs")

class Adapter(object):

	"""
	althougth , we renew the class, but we still need to use the OldCourse.show(method
		
	"""

	def __init__(self, course):

		self.course = course

	def show(self):

		"""
		the one who actually operate

		"""
	
		self.course.show_desc()
		self.course.show_teacher()
		self.course.show_labs()

if __name__=='__main__':

	old_course = OldCourse()
	page = Page(old_course)
	page.render()
	print("")
	new_course = NewCourse()

	# if the new class without show method , we need to use a adapter

	adapter = Adapter(new_course)
	page = Page(adapter)
	page.render()



