

class User(object):

	"""
	User class 
	"""
	
	def is_login(self):
		
		return True

	def has_privilege(self, privilege):

		return True 

class Course(object):

	"""
	course

	"""
	def can_be_learned(self):

		return True

class Lab(object):

	"""

	Lab class

	"""

	def can_be_started(self):

		return True

class Client(object):

	"""
	old client , use for a new lab

	"""

	def __init__(self, user, course, lab):

		self.user = user
		self.course = course
		self.lab = lab

	def start_lab(self):

		"""
		every time you start a lab, you should test if the user are loging in
	
		""""

		if self.user.is_login() and self.course.can_be_learned() and self.lab.can_betarted():

			print("Start lab")

		else:

			print("Can not start lab")

class FacadeLab(object):

	"""
	the new Lab class , object module 
		
	"""

	def __init__(self, user, course, lab):

		self.user = user
		self.course = course
		self.lab = lab

	def can_be_started(self):

		if self.user.is_login() and self.course.can_be_learned() and 
			self.lab.can_be_started():

			return True

		else:
		
			return False

class NewClient(object):
	
	"""
	new client , use 

	"""
	
	def __init__(self, facade_lab):

		self.lab = facade_lab

	def strt_lab(self):
	
		"""
		start a new lab , only judge the FacadeLab start 
		
		"""

		if self.lab.can_be_started:

			print("start lab")

		else:

			print("can not start lab")

if __name__=='__main__':

	user = User()
	course = Course()
	lab = Lab()
	client = Client(user, course, lab)
	client.start_lab()

	print("Use Facade Pattern:")
	facade_lab = FacadeLab(user, course, lab)
	facade_client = NewClient(facade_lab)
	facade_client.start_lab()


